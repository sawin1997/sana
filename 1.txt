cal.java

import java.rmi.*;
import java.rmi.server.*;

public class Cal extends UnicastRemoteObject implements CalInterface{

	public Cal() throws RemoteException{}

	public  int add(int a, int b){

		int sum;

		sum = a + b;

		return sum;
	}
}



calclient.java

import java.rmi.*;
import java.util.Scanner;

public class CalClient{
	public static void main(String[] args) {
		try{
			CalInterface cal1 = (CalInterface) Naming.lookup("addtion");
			Scanner input = new Scanner(System.in);

			System.out.println("Enter num1 : ");
			int num1 = input.nextInt();

			System.out.println("Enter num2 : ");
			int num2 = input.nextInt();

			System.out.println("Result: \n" + cal1.add(num1, num2));
		}catch(Exception e){
			System.out.println("Error: " + e);
		}
	}
}

calinterface

import java.rmi.*;

public interface CalInterface extends Remote{
	public int add(int a, int b) throws RemoteException;
}



calserver

import java.rmi.*;
import java.rmi.registry.*;

public class CalServer {

	public static void main(String[] args) {
		try{

			Cal cal1 = new Cal();
			Naming.rebind("addtion", cal1);
			System.out.println("Server ready");
		}catch(Exception e){
			System.out.println("Error: " + e);
		}
		
	}
}



MPI

#include <stdio.h>
#include <mpi.h>

int main(int argc, char** argv)
{
	
	MPI_Init(NULL, NULL);

	int world_size;
	MPI_Comm_size(MPI_COMM_WORLD, &world_size);  //no. of processor


	int world_rank;
	MPI_Comm_size(MPI_COMM_WORLD, &world_rank); //rank


	char processor_name[MPI_MAX_PROCESSOR_NAME];
	int name_len;

	MPI_Get_processor_name(processor_name, &name_len);


	printf("\nprocessor name: %s, rank %d, out of %d processe\n", processor_name, world_rank, world_size);


	MPI_Finalize();

	return 0;
}

touch mpi1.c

mpicc mpi1.c -o npi
mpirun -np 2 ./npi

mpirun -np 4 ./npi


RPC

hello.x

struct numbers{
	int a;
	int b;
};

program PRINTHELLO{
	version PRINHELLOVERS{
		int ADD(numbers) = 1;
		int SUM(numbers) = 2;
	}=1;
}=0x21234567;


hello_client

#include "hello.h"


int
printhello_1(char *host, int num1, int num2, int choise)
{
	CLIENT *clnt;
	int  *result_1;
	numbers  add_1_arg;
	int  *result_2;
	numbers  sum_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, PRINTHELLO, PRINHELLOVERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
//--------------------------------------------


	if(choise == 1){

		add_1_arg.a = num1;
		add_1_arg.b = num2;

		result_1 = add_1(&add_1_arg, clnt);
		if (result_1 == (int *) NULL) {
			clnt_perror (clnt, "call failed");
		}

		return *result_1;

	}
	if(choise == 2){

		sum_1_arg.a =num1;
		sum_1_arg.b =num2;
		result_2 = sum_1(&sum_1_arg, clnt);
		if (result_2 == (int *) NULL) {
			clnt_perror (clnt, "call failed");
		}

		return *result_2;

	}

	
	

//-----------------------------------
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;
	int num1, num2,choise, result;

	printf("CHOISE: 1--addtion/// \n           2--substraction");
	scanf("%d", &choise);

	printf("Enter 1st nu: ");
	scanf("%d", &num1);

	printf("Enter 2st nu: ");
	scanf("%d", &num2);




	// if (argc < 2) {
	// 	printf ("usage: %s server_host\n", argv[0]);
	// 	exit (1);
	// }
	host = argv[1];

	result= printhello_1 (host, num1, num2,choise);
	printf("result: %d", result);

exit (0);
}


hello_server

#include "hello.h"

int *
add_1_svc(numbers *argp, struct svc_req *rqstp)
{
	static int  result=0;

	result = argp->a + argp->b;

	return &result;
}

int *
sum_1_svc(numbers *argp, struct svc_req *rqstp)
{
	static int  result=0;

	result = argp->a - argp->b;

	return &result;
}